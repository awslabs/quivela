{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintQuivela where

-- pretty-printer generated by the BNF converter

import AbsQuivela
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Id where
  prt _ (Id i) = doc (showString ( i))



instance Print Val where
  prt i e = case e of
    VInt n -> prPrec i 0 (concatD [prt 0 n])
    VMap -> prPrec i 0 (concatD [doc (showString "map")])

instance Print Expr where
  prt i e = case e of
    EVar id -> prPrec i 12 (concatD [prt 0 id])
    EConst val -> prPrec i 12 (concatD [prt 0 val])
    ETuple exprs -> prPrec i 11 (concatD [doc (showString "<"), prt 0 exprs, doc (showString ">")])
    ETupleProj expr1 expr2 -> prPrec i 10 (concatD [prt 10 expr1, doc (showString "^"), prt 11 expr2])
    EProj expr1 expr2 -> prPrec i 9 (concatD [prt 10 expr1, doc (showString "."), prt 9 expr2])
    EIdx expr1 expr2 -> prPrec i 8 (concatD [prt 9 expr1, doc (showString "["), prt 0 expr2, doc (showString "]")])
    ECall expr exprs -> prPrec i 8 (concatD [prt 9 expr, doc (showString "("), prt 0 exprs, doc (showString ")")])
    ENot expr -> prPrec i 8 (concatD [doc (showString "!"), prt 8 expr])
    EEq expr1 expr2 -> prPrec i 7 (concatD [prt 8 expr1, doc (showString "=="), prt 7 expr2])
    EAssign expr1 expr2 -> prPrec i 6 (concatD [prt 8 expr1, doc (showString "="), prt 7 expr2])
    EOr expr1 expr2 -> prPrec i 3 (concatD [prt 4 expr1, doc (showString "|"), prt 3 expr2])
    EAmp expr1 expr2 -> prPrec i 3 (concatD [prt 4 expr1, doc (showString "&"), prt 3 expr2])
    EMethod id args expr -> prPrec i 3 (concatD [doc (showString "method"), prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "{"), prt 0 expr, doc (showString "}")])
    ESeq expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString ";"), prt 2 expr2])
    ENew inits expr -> prPrec i 1 (concatD [doc (showString "new"), doc (showString "("), prt 0 inits, doc (showString ")"), doc (showString "{"), prt 0 expr, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Arg where
  prt i e = case e of
    UArg id -> prPrec i 0 (concatD [prt 0 id])
    TArg id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Init where
  prt i e = case e of
    UInit initmod id expr -> prPrec i 0 (concatD [prt 0 initmod, prt 0 id, doc (showString "="), prt 0 expr])
    TInit initmod id type_ expr -> prPrec i 0 (concatD [prt 0 initmod, prt 0 id, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 expr])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print InitMod where
  prt i e = case e of
    ConstMod -> prPrec i 0 (concatD [doc (showString "const")])
    NoMod -> prPrec i 0 (concatD [])

instance Print Type where
  prt i e = case e of
    TInt -> prPrec i 0 (concatD [doc (showString "int")])
    TTuple types -> prPrec i 0 (concatD [doc (showString "<"), prt 0 types, doc (showString ">")])
    TAny -> prPrec i 0 (concatD [doc (showString "*")])
    TMap type_1 type_2 -> prPrec i 0 (concatD [doc (showString "map"), prt 0 type_1, prt 0 type_2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

