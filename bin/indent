#!/usr/bin/env stack
-- stack --resolver lts-12.6 script --package directory,filemanip,process
import qualified Control.Monad as M
import qualified Data.List as L
import qualified System.Directory as D
import System.IO (FilePath)
import qualified System.Process as Proc
import qualified System.FilePath.Find as Find
import System.FilePath.Find( (==?) )

lsFiles :: FilePath -> IO [FilePath]
lsFiles dir =
  let recPred = do
        git <- M.liftM (L.isInfixOf ".git") Find.filePath
        stack <- M.liftM (L.isInfixOf ".stack-work") Find.filePath
        return $ not git && not stack
      filterPred = Find.extension ==? ".hs"
  in Find.find recPred filterPred dir

main :: IO ()
main = do
  putStrLn "Running hindent..."
  dir <- D.getCurrentDirectory
  putStrLn $ "Reading " ++ dir
  files <- lsFiles dir
  putStrLn "Files:"
  mapM_ (\f -> putStrLn $ "  " ++ f) files
  mapM_ (\f -> Proc.createProcess (Proc.proc "hindent" [f])) files

-- Local Variables:
-- mode:haskell
-- End:
